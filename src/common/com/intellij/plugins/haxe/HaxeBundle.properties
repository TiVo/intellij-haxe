#
# Copyright 2000-2013 JetBrains s.r.o.
# Copyright 2014-2014 AS3Boyan
# Copyright 2014-2014 Elias Ku
# Copyright 2017-2018 Eric Bishton
# Copyright 2017-2018 Ilya Malanin
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
haxe.title=Haxe
haxe.module.type.name=Haxe Module
haxe.module.type.description=Encapsulates core functionality for building <b>Haxe</b> applications. \
  Support running Haxe application in <b>Neko</b> virtual machine.
haxe.sdk.name.presentable=Haxe toolkit
runner.configuration.name=Haxe Application
haxe.sdk.name.suggest=Haxe {0}
haxe.run.exclude.compile=&Skip compilation
haxe.main.class=Main &class:
haxe.run.parameters=&Parameters:
haxe.run.module=&Module\:
haxe.run.target=&Target:
haxe.compiler.description=Haxe Compiler
haxe.language.id=Haxe
haxe.file.type.name=Haxe
haxe.file.type.description=Haxe Files
no.sdk.for.module=No SDK for module\: {0}
haxe.module.editor.haxe=Haxe
no.module.for.run.configuration=No module for Run Configuration {0}
action.create.new.class=Haxe Class
progress.creating.class=Creating Class {0}
haxe.run.wrong.target=Wrong target {0}\! You can run only Neko, Flash or JavaScript.
haxe.run.bad.neko.bin.path=No Neko\! Select Neko binary for you Haxe sdk.
choose.haxe.main.class=Choose Haxe Main class
neko.executable=&Neko executable\:
haxe.color.settings.description.line.comment=Line comment
haxe.color.settings.description.block.comment=Block comment
haxe.color.settings.description.doc.comment=Documentation comment
haxe.color.settings.description.keyword=Keyword
haxe.color.settings.description.number=Number
haxe.color.settings.description.string=String
haxe.color.settings.description.operator=Operator
haxe.color.settings.description.parenths=Parenths
haxe.color.settings.description.brackets=Brackets
haxe.color.settings.description.braces=Braces
haxe.color.settings.description.comma=Comma
haxe.color.settings.description.dot=Dot
haxe.color.settings.description.semicolon=Semicolon
haxe.color.settings.description.bad.character=Bad character
haxe.color.settings.description.class=Class
haxe.color.settings.description.interface=Interface
haxe.color.settings.description.instance.member.variable=Instance member variable
haxe.color.settings.description.instance.member.function=Instance member function
haxe.color.settings.description.static.member.function=Static member function
haxe.color.settings.description.static.member.variable=Static member variable
haxe.color.settings.description.parameter=Parameter
haxe.color.settings.description.local.variable=Local variable
haxe.output.file.name=&Output file name\:
haxe.output.folder=Output &folder\:
cannot.resolve.reference=Can't resolve reference
flex.sdk.not.specified=Flex SDK is required for Flash applications debugging. Please configure Flex SDK in Project Structure dialog.
flex.sdk.not.found=Flex SDK ''{0}'' not found. Please configure Flex SDK in Project Structure dialog.
haxe.proper.debug.targets=You can debug only flash or HXCPP targets\!
haxe.break.point.title=Haxe Breakpoints
flex.sdk.label=&Flex SDK for Flash applications debugging:
haxe.run.file.to.run=Custom file to &run
nme.nmml=NMML
nme.nmml.description=NMML project file
haxe.configuration.use.hxml.to.build=&HXML
haxe.configuration.use.nmml.to.build=&NMML
haxe.configuration.hxml.file=HXML file\:
haxe.configuration.nmml.file=NMML file\:
haxe.configuration.openfl.file=OpenFL file\:
haxe.run.no.module=No module for configuration\: {0}
haxe.run.select.custom.file=Select file to launch in case of using HXML
haxe.run.do.not.select.custom.file=You cannot launch custom file in case of using NME
haxe.run.do.not.select.custom.executable=You cannot use custom executable in case of using NME
overrides.method.in=Overrides method ''{0}'' in ''{1}''
implements.method.in=Implements method ''{0}'' in ''{1}''
haxe.override.method=Choose method to override
haxe.implement.method=Choose method to implement
fields.to.generate.constructor=Constructor
fields.to.generate.getters=Select Fields to Generate Getters
fields.to.generate.setters=Select Fields to Generate Setters
fields.to.generate.getters.setters=Select Fields to Generate Getters and Setters
haxe.configuration.use.custon.properties=Haxe &Compiler\:
haxelib.executable=&Haxelib executable\:
haxe.compile.with=Compile with\:
sources.root.detector.sources.name=Library sources
sources.root.detector.classes.name=Library classes
create.nmml.file.action=NMML File
create.nmml.file.action.description=Create NMML File
haxe.unresolved.type=Unresolved type
choose.class.to.import.title=Choose Class To Import
add.import.multiple.candidates={0} ? (multiple choices...) Alt+Enter
autodetected.source.root.type=Haxe
macro.haxe.array.variable=haxeArrayVariable()
macro.haxe.variable.name=haxeSuggestVariableName()
macro.haxe.index.name=haxeSuggestIndexName()
livetemplate.description.iter=Iterate (for..in)
livetemplate.description.itar=Iterate elements of array
livetemplate.description.ritar=Iterate elements of array in reverse order
haxe.surrounder.if=if
haxe.surrounder.if.else=if / else
haxe.surrounder.while=while
haxe.surrounder.do.while=do / while
haxe.surrounder.try.catch=try / catch
haxe.settings.name=Haxe
haxe.conditional.compilation.defined.macros=Defined Haxe conditional compilation macros\:
haxe.conditional.compilation.title=Define Haxe Macros
haxe.conditional.compilation.macros=Conditional compilation macros\:
haxe.color.settings.description.conditional.compilation=Conditionally non-compiled
haxe.conditional.compilation.setting=Project Macros\:
haxe.settings.edit=Edit
haxe.intention.undefine=Undefine flag ''{0}''
haxe.intention.define=Define flag ''{0}''
quick.fixes.family=Haxe Quick Fixes
haxe.color.settings.description.conditional.compilation.defined.flag=Defined flag
haxe.color.settings.description.conditional.compilation.undefined.flag=Undefined Flag
haxe.project.reparsing=Applying new compiler macros...
refactoring.introduce.selection.error=Cannot perform refactoring using selected element(s)
refactoring.introduce.variable.dialog.title=Introduce Variable
install.flex.plugin=Please install Flex plugin to debug Flash target\!
enable.flex.plugin=Please enable Flex plugin to debug Flash target\!
hxcpp.port.label=HXCPP Debugging Port\:
hxcpp.debugging.description=Creates debug server that communicates with application across protocol supported by hxcpp.DebugSocket
haxe.inspections.group.name=Haxe
haxe.inspections.nme.build.directory=NMML Build Directory Inspection
haxe.inspections.nme.build.directory.descriptor=You need to provide separate build directories for release and debug builds
haxe.inspections.nme.build.directory.fix.name=Create debug tag
haxe.nme.arguments=NME arguments\:
haxe.openfl.arguments=OpenFL arguments\:
inspections.group.name=Haxe
haxe.inspection.unused.import.name=Unused import statement
haxe.fix.optimize.imports=Optimize imports
haxe.inspection.unresolved.symbol=Unresolved symbol
haxe.inspection.deprecated.symbol=Deprecated symbol
haxe.inspection.preprocessor.symbol.name=HaxePreprocessorInspection
haxe.inspection.preprocessor.symbol.long.name=Preprocessing Symbol Inspection
haxe.openfl.xmlproject=OpenFL Project XML \:
haxe.lookup.alias=alias for {0}
# HXML syntax support
hxml.language.id = HXML
hxml.file.type.name = HXML
hxml.file.type.description = Haxe Build Files
sdk.roots.multiple=Haxe SDK has multiple roots. This may lead to unexpected behavior.
sdk.roots.no.valid.root=Haxe SDK has no valid root. Set up or change SDK.

# HAXE tests

haxe.tests.runner.configuration.name=Haxe Tests
haxe.tests.run.module=&Module\:
haxe.tests.run.runner.class=&Runner Class\:

# HAXE semantic errors
haxe.semantic.overwritten.method.parameter.optional=Expected: ''{0}''. Parameter is declared as optional by superclass method ''{1}''.
haxe.semantic.overwritten.method.parameter.required=Expected: ''{0}''. Parameter is declared as required by superclass method ''{1}''.
haxe.semantic.implemented.method.parameter.optional=Expected: ''{0}''. Parameter is declared as optional by interface method ''{1}''.
haxe.semantic.implemented.method.parameter.required=Expected: ''{0}''. Parameter is declared as required by interface method ''{1}''.
haxe.semantic.method.parameter.optional.add=Declare parameter as optional
haxe.semantic.method.parameter.optional.remove=Remove "optional" mark from parameter declaration
haxe.semantic.implemented.super.method.signature.differs=Signature of inherited method ''{0}'' declared by class ''{1}'' differs from declared by interface. Expected ''{2}'', got ''{3}''
haxe.semantic.static.field.override=Field ''{0}'' overrides a static field of a superclass.
haxe.semantic.no.constructor=Class {0} doesn't have a constructor
haxe.semantic.incompatible.types=\
  <html><body>Incompatible types.<table>\
  <tr><td>Expected:</td><td><b>{1}</b></td></tr>\
  <tr><td>Found:</td><td>{0}</td></tr>\
  </table></body></html>
haxe.semantic.more.arguments.than.expected=Found more arguments than expected
haxe.semantic.0.arguments.expected.got.1=Expected {0} arguments count, got {1}
haxe.semantic.condition.must.be.boolean=Condition must be boolean type
semantic.static.constructor=Constructor can't be static
haxe.semantic.not.anonymous.type=Not an anonymous type
haxe.semantic.cant.extend.self=Cannot extend self
haxe.semantic.variable.redefinition.not.allowed=Redefinition of variable ''{0}'' in subclass is not allowed. Previously declared at ''{1}''
haxe.semantic.package.not.correspond.file.path=Package name ''{0}'' does not correspond to the file path ''{1}''
haxe.semantic.package.name.uppercase=Package name ''{0}'' must start with a lower case character
haxe.semantic.static.initializer.must.be.static=Static initializer method ''{0}'' must be static
haxe.semantic.method.body.not.allowed=Method body not allowed for methods declared in {0}
haxe.semantic.return.type.required=Return type required for method declared in {0}
haxe.semantic.parameter.type.required=Parameter type required for method declared in {0}
haxe.semantic.type.name.uppercase=Type name ''{0}'' must start with uppercase
haxe.semantic.duplicate.member.name=Duplicate class member declaration ''{0}''
haxe.semantic.not.allowed.override=Can't override static, inline or final methods
haxe.semantic.overrides.nothing=Method overrides nothing
haxe.semantic.duplicate.parameter.name=Duplicate parameter name ''{0}''
haxe.semantic.invalid.accessor.type=Invalid {0}ter accessor type. Only ''{0}'', ''default'', ''null'', ''never'', ''dynamic'' types allowed
haxe.semantic.accessor.method.not.found=Accessor method ''{0}'' not found
haxe.semantic.not.real.var=This field cannot be initialized because it is not a real variable
haxe.semantic.optional.mark.redundant=Optional mark is redundant when initial value specified
haxe.semantic.method.visibility.less.then.parent=Method ''{0}'' has less visibility ({1}) than declared at ''{2}'' (was <b>{3}</b>)
haxe.semantic.not.implemented.members=<html><body>Following members, declared at interface ''{0}'' not implemented:{1}</body></html>
haxe.semantic.missing.list=<hr><p><b>{0}</b>: {1}</p>
haxe.semantic.missing.list.item=''{0}''
haxe.semantic.constant.value.required=Parameter default type should be constant but was ''{0}''
haxe.semantic.interface.cant.implement=No implements clause allowed for interfaces
haxe.semantic.not.interface=''{0}'' not an interface
haxe.semantic.should.extend.class=Should extend by using a class
haxe.semantic.should.extend.class.but.extend.0=Should extend by using a class, but extending ''{0}''
haxe.semantic.field.has.different.accessors=Field has different property access than defined at ''{0}'' (''{1}'' should be ''<b>{2}</b>'')
haxe.semantic.field.type.required=Field type required by interface ''{0}'', should be ''{1}''
haxe.semantic.unexpected.parameter=Unexpected parameter
haxe.semantic.not.matching.arity=Not matching arity, expected {0} parameters count, got {1}
haxe.semantic.remove.parameter=Remove parameter
haxe.semantic.final.var.init=Final field ''{0}'' must be initialized immediately or in the constructor
haxe.semantic.parameter.default.constant.required=Parameter default type should be constant but was ''{0}''
haxe.semantic.final.static.var.init=Static final variable ''{0}'' must be initialized
haxe.semantic.property.cant.be.final=Property can not be final
haxe.semantic.string.interpolation.quotes=Expressions with string interpolation should be wrapped by single quotes
haxe.semantic.anonymous.field.same.type.required=<html><body>Type of anonymous field ''{0}'' differs from declared at ''{1}''.<table>\
  <tr><td>Expected:</td><td><b>{2}</b></td></tr>\
  <tr><td>Found:</td><td>{3}</td></tr>\
  </table></body></html>

# HAXE quickfixes
# {0} - Found type, {1} - Expected type
haxe.quickfix.add.cast=Add cast from ''{0}'' to ''{1}''
haxe.quickfix.remove.excessive.arguments=Remove excessive arguments
haxe.quickfix.drop.initializer=Drop initializer
haxe.quickfix.drop.modifier=Drop modifier ''{0}''
haxe.quickfix.drop.modifier.from=Drop modifier ''{0}'' from ''{1}''
haxe.quickfix.drop.extend=Drop extend declaration
haxe.quickfix.change.type=Change {0} ''{1}'' type from ''{2}'' to ''{3}''
haxe.quickfix.set.package.name.to=Set package name to ''{0}''
haxe.quickfix.add.modifier=Add modifier ''{0}''
haxe.quickfix.setup.module.source.paths=Configure module source-paths
haxe.quickfix.rename.to=Rename to ''{0}''
haxe.quickfix.create.accessor.method=Create {1}ter-method ''{0}_{1}''
haxe.quickfix.add.optional.mark=Remove optional mark
haxe.quickfix.remove.optional.mark=Remove optional mark
haxe.quickfix.change.visibility=Make ''{0}''
haxe.quickfix.change.target.visibility=Make ''{0}'' {1}
haxe.quickfix.implement.missing.members=Implement missing members
haxe.quickfix.change.implements.to.extends=Change ''implements {0}'' to ''extends {0}''
haxe.quickfix.drop=Drop {0}
haxe.quickfix.add.method.return.type=Add method return type ''{0}''

# HAXE parameter info helper
haxe.parameter.info.helper.no.parameters=No parameters
haxelib.dependency.list.prefix=Dependency of 
haxelib.dependency.list.separator=, 

# HAXE Module settings dialog.
module.settings.synchronize.dependencies=Use Haxe project files  and haxelib to update module dependencies and settings.  (Project file changes update IDEA settings; IDEA does not update Haxe project files.)
module.settings.synchronize.dependencies.title=Automatically synchronize dependencies and settings

# Parsing
parsing.error.missing.semi.colon=Missing semicolon.

# Debug Exceptions
invalid.value.detected.at.runtime=Invalid value detected at runtime\: {0}
invalid.case.value.unadorned=Unexpected case encountered in switch statement.
invalid.case.value=Unexpected case encountered in switch statement\: {0}

# Folding settings
exportable.HaxeFoldingSettings.presentable.name=Code Folding Settings

#HaxelibProjectUpdater messages
haxelib.synchronization.title=Haxelib Synchronization
library.source.root.was.not.found.0=Library source root was not found\: {0}
could.not.determine.library.source.root.0=Could not determine library source root\: {0}
